//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "anchor_tx")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub wallet_name: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub block_hash: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub anchor: Json,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub txid: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::block::Entity",
        from = "(Column::WalletName, Column::BlockHash)",
        to = "(super::block::Column::WalletName, super::block::Column::Hash)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Block,
    #[sea_orm(
        belongs_to = "super::tx::Entity",
        from = "(Column::WalletName, Column::Txid)",
        to = "(super::tx::Column::WalletName, super::tx::Column::Txid)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tx,
}

impl Related<super::block::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Block.def()
    }
}

impl Related<super::tx::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tx.def()
    }
}
