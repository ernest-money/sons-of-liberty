//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tx")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub wallet_name: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub txid: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub whole_tx: Option<Vec<u8>>,
    pub last_seen: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::anchor_tx::Entity")]
    AnchorTx,
}

impl Related<super::anchor_tx::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AnchorTx.def()
    }
}
